/**
 * futur-fogueres-api
 * The API for Futur Fogueres project
 *
 * OpenAPI spec version: 1.0.0100
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { Question } from '../model/question';
import { QuestionsResponse } from '../model/questionsResponse';
import { RespuestasOptionsResponse } from '../model/respuestasOptionsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PreguntaService {

    protected basePath = 'https://virtserver.swaggerhub.com/FGARCIADEVELOP_1/futurFogueres/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Borra los datos de la pregunta pasada por par√°metro.
     * @param idPregunta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePregunta(idPregunta: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public deletePregunta(idPregunta: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public deletePregunta(idPregunta: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public deletePregunta(idPregunta: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPregunta === null || idPregunta === undefined) {
            throw new Error('Required parameter idPregunta was null or undefined when calling deletePregunta.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse2001>('delete',`${this.basePath}/preguntas/${encodeURIComponent(String(idPregunta))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Devuelve todas las opciones de respuesta de la pregunta consultada.
     * @param idPregunta 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOptionsFromQuestion(idPregunta: number, observe?: 'body', reportProgress?: boolean): Observable<RespuestasOptionsResponse>;
    public getAllOptionsFromQuestion(idPregunta: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RespuestasOptionsResponse>>;
    public getAllOptionsFromQuestion(idPregunta: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RespuestasOptionsResponse>>;
    public getAllOptionsFromQuestion(idPregunta: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPregunta === null || idPregunta === undefined) {
            throw new Error('Required parameter idPregunta was null or undefined when calling getAllOptionsFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RespuestasOptionsResponse>('get',`${this.basePath}/preguntas/${encodeURIComponent(String(idPregunta))}/opciones`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Devuelve todas las preguntas creadas.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllQuestions(observe?: 'body', reportProgress?: boolean): Observable<QuestionsResponse>;
    public getAllQuestions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionsResponse>>;
    public getAllQuestions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionsResponse>>;
    public getAllQuestions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<QuestionsResponse>('get',`${this.basePath}/preguntas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Almacena una nueva pregunta en la base de datos.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postQuestion(body?: Question, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public postQuestion(body?: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public postQuestion(body?: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public postQuestion(body?: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse200>('post',`${this.basePath}/preguntas`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Actualizar un pedido
     * @param idPregunta 
     * @param body Item to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPregunta(idPregunta: number, body?: Question, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putPregunta(idPregunta: number, body?: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putPregunta(idPregunta: number, body?: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putPregunta(idPregunta: number, body?: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idPregunta === null || idPregunta === undefined) {
            throw new Error('Required parameter idPregunta was null or undefined when calling putPregunta.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/preguntas/${encodeURIComponent(String(idPregunta))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
